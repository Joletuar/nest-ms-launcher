name: nest-microservices

services:
  rabbitmq-server:
    restart: unless-stopped
    container_name: rabbitmq-server
    image: rabbitmq:3.12.14-management-alpine
    ports:
      - ${RABBITMQ_UI_PORT}:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-server-volume:/var/lib/rabbitmq

  redis-server:
    container_name: redis_server
    restart: unless-stopped
    image: redis:alpine3.20
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis-server-volume:/data

  client-gateway:
    restart: unless-stopped
    container_name: client-gateway
    build:
      context: ./client-gateway
      dockerfile: dockerfile
    ports:
      - '${GATEWAY_PORT}:3000'
    environment:
      - RABBITMQ_SERVER=${RABBITMQ_SERVER}
      - PORT=${GATEWAY_PORT}
    volumes:
      - ./client-gateway/src:/app/src
    command: pnpm start:dev

  products-ms:
    depends_on:
      - rabbitmq-server
      - redis-server
    restart: unless-stopped
    container_name: products-ms
    build:
      context: ./products-ms
      dockerfile: dockerfile
    environment:
      - DATABASE_URL=${PRODUCTS_DATABASE_URL}
      - RABBITMQ_SERVER=${RABBITMQ_SERVER}
      - PORT=${PRODUCTS_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./products-ms/src:/app/src
    command: pnpm start:dev

  orders-db:
    restart: unless-stopped
    container_name: orders-db
    image: postgres:15.6-alpine3.19
    environment:
      - POSTGRES_USER=${ORDERS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${ORDERS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${ORDERS_POSTGRES_DB}
    ports:
      - '${ORDERS_POSTGRES_PORT}:5432'
    volumes:
      - orders-db-volume:/var/lib/postgres/data

  orders-ms:
    restart: unless-stopped
    depends_on:
      - orders-db
      - rabbitmq-server
    container_name: orders-ms
    build:
      context: ./orders-ms
      dockerfile: dockerfile
    environment:
      - DATABASE_URL=${ORDERS_DATABASE_URL}
      - RABBITMQ_SERVER=${RABBITMQ_SERVER}
      - PORT=${ORDERS_PORT}
    volumes:
      - ./orders-ms/src:/app/src
    command: pnpm start:dev

  payments-ms:
    depends_on:
      - rabbitmq-server
    container_name: payments-ms
    restart: unless-stopped
    build:
      context: ./payments-ms
      dockerfile: dockerfile
    ports:
      - '${PAYMENTS_PORT}:3000'
    environment:
      - PORT=${PAYMENTS_PORT}
      - STRIPE_API_KEY=${PAYMENTS_STRIPE_API_KEY}
      - SUCCESS_URL=${PAYMENTS_SUCCESS_URL}
      - CANCEL_URL=${PAYMENTS_CANCEL_URL}
      - ENDPOINT_SECRET=${PAYMENTS_ENDPOINT_SECRET}
      - RABBITMQ_SERVER=${RABBITMQ_SERVER}
    volumes:
      - ./payments-ms/src:/app/src
    command: pnpm start:dev

  auth-ms:
    depends_on:
      - rabbitmq-server
    restart: unless-stopped
    container_name: auth-ms
    build:
      context: ./auth-ms
      dockerfile: dockerfile
    environment:
      - PORT=${AUTH_PORT}
      - RABBITMQ_SERVER=${RABBITMQ_SERVER}
      - DATABASE_URL=${AUTH_DATABASE_URL}
      - JWT_SECRET=${AUTH_JWT_SECRET}
    volumes:
      - ./auth-ms/src:/app/src
    command: pnpm start:dev

volumes:
  orders-db-volume:
  redis-server-volume:
  rabbitmq-server-volume:
